---
- name: Create Initial Infra
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Set ssh key
      ec2_key:
        name: demo_rsa_key
        key_material: "{{ lookup('file', '../demo_key.pub') }}"

    - name: Create VPC for infra
      ec2_vpc_net:
        name: Infra_VPC
        cidr_block: 10.10.0.0/16
        tags:
          demo: 'true'
      register: infra_vpc

    - name: Create IGW for infra_vpc
      ec2_vpc_igw:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        tags:
          demo: 'true'
      register: igw

    - name: Determine main routing table id
      ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ infra_vpc.vpc.id }}"
          "association.main": "true"
      register: main_route_table

    - name: Create Subnet for bastion
      ec2_vpc_subnet:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        cidr: 10.10.0.0/24
        map_public: true
        tags:
          demo: 'true'
      register: bastion_subnet

    - name: Create Subnet for web
      ec2_vpc_subnet:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        cidr: 10.10.1.0/24
        map_public: true
        tags:
          demo: 'true'
      register: web_subnet

    - name: Create Subnet for app
      ec2_vpc_subnet:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        cidr: 10.10.2.0/24
        tags:
          demo: 'true'
      register: app_subnet

    - name: Add default route for infra_vpc
      ec2_vpc_route_table:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        route_table_id: "{{ main_route_table.route_tables[0].id }}"
        lookup: id
        tags:
          demo: 'true'
        subnets:
          - "{{ bastion_subnet.subnet.id }}"
          - "{{ web_subnet.subnet.id }}"
          - "{{ app_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"

    - name: Provision relaxed security group # No egress rules, so I can install pacakges via apt
      ec2_group:
        name: open-sec
        description: "Security group for bastion"
        vpc_id: "{{ infra_vpc.vpc.id }}"
        tags:
          demo: 'true'
        rules:
          - proto: tcp
            ports: 22
            cidr_ip:
              - 71.84.88.188/32 # Home
              - 128.107.0.0/16  # Cisco

    - name: Provision security groups for bastion
      ec2_group:
        name: bastion-sec
        description: "Security group for bastion"
        vpc_id: "{{ infra_vpc.vpc.id }}"
        tags:
          demo: 'true'
        rules:
          - proto: tcp
            ports: 22
            cidr_ip:
              - 71.84.88.188/32 # Home
              - 128.107.0.0/16  # Cisco
        rules_egress:
          - proto: tcp
            ports: 22
            cidr_ip: "{{ infra_vpc.vpc.cidr_block }}"
      register: bastion_sec_group

    - name: Provision security group for web
      ec2_group:
        name: web-sec
        description: "Security group for web hosts"
        vpc_id: "{{ infra_vpc.vpc.id }}"
        tags:
          demo: 'true'
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports: 22
            cidr_ip: "{{ bastion_subnet.subnet.cidr_block }}"
        rules_egress:
          - proto: tcp
            ports: 80
            cidr_ip: "{{ app_subnet.subnet.cidr_block }}"
      register: web_sec_group

    - name: Provision security group for app
      ec2_group:
        name: app-sec
        description: "Security group for app hosts"
        vpc_id: "{{ infra_vpc.vpc.id }}"
        tags:
          demo: 'true'
        rules:
          - proto: tcp
            ports: 80
            cidr_ip: "{{ web_subnet.subnet.cidr_block }}"
          - proto: tcp
            ports: 22
            cidr_ip: "{{ bastion_subnet.subnet.cidr_block }}"
        rules_egress: []
      register: app_sec_group

    - name: Provision Bastion VM
      ec2:
        key_name: demo_rsa_key
        instance_type: "{{ vm_type }}"
        image: "{{ vm_ami }}"
        instance_tags:
          Name: bastion
          demo: 'true'
        assign_public_ip: yes
        vpc_subnet_id: "{{ bastion_subnet.subnet.id }}"
        group: open-sec
        wait: true
        exact_count: 1
        count_tag: { Name: bastion }
      register: bastion_instance

    - name: Add to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_hosts
      loop: "{{ bastion_instance.instances }}"

    - name: Provision Web VM
      ec2:
        key_name: demo_rsa_key
        instance_type: "{{ vm_type }}"
        image: "{{ vm_ami }}"
        instance_tags:
          Name: web
          demo: 'true'
        vpc_subnet_id: "{{ web_subnet.subnet.id }}"
        assign_public_ip: true
        wait: true
        group: open-sec
        exact_count: 1
        count_tag: { Name: web }
      register: web_instance

    - name: Add to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groups:
          - ec2_hosts
          - web
      loop: "{{ web_instance.instances }}"

    - name: Provision App VM
      ec2:
        key_name: demo_rsa_key
        instance_type: "{{ vm_type }}"
        image: "{{ vm_ami }}"
        instance_tags:
          Name: app
          demo: 'true'
        vpc_subnet_id: "{{ app_subnet.subnet.id }}"
        assign_public_ip: true
        wait: true
        group: open-sec
        exact_count: 1
        count_tag: { Name: app }
      register: app_instance

    - name: Add to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groups:
          - ec2_hosts
          - app
      loop: "{{ app_instance.instances }}"

    - name: Wait for SSH
      wait_for:
        port: 22
        host: "{{ item.public_dns_name }}"
        search_regex: OpenSSH
        delay: 30
        timeout: 320
      loop: "{{ app_instance.instances }}"

    - name: Ensure all instances have correct security group (for subsequent runs)
      ec2:
        state: running
        instance_tags: { demo: 'true' }
        group: open-sec

- name: Configure all VMs
  hosts: all
  remote_user: ubuntu
  become: true
  gather_facts: true

  tasks:
    - name: Install packages
      package:
        name: "{{ item }}"
      with_items:
        - nginx
        - curl

- name: Configure web VM(s)
  environment:
    AWS_SECRET_KEY: "{{ lookup('env','AWS_SECRET_KEY') }}"
    AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    AWS_REGION: "{{ lookup('env','AWS_REGION') }}"
  hosts: tag_web
  remote_user: ubuntu
  gather_facts: false
  pre_tasks:
    - name: Gather info about web instance
      ec2_instance_info:
        filters:
          "tag:demo": 'true'
          "tag:Name": 'web'
          instance-state-name: 'running'
      register: web_instance
      delegate_to: localhost

    - name: Gather info about app instance
      ec2_instance_info:
        filters:
          "tag:demo": 'true'
          "tag:Name": 'app'
          instance-state-name: 'running'
      register: app_instance
      delegate_to: localhost

    - name: Configure SSL Certs
      package:
        name: ssl-cert
      become: true

  roles:
    - role: geerlingguy.nginx
      nginx_remove_default_vhost: true
      web_external_dns: "{{ web_instance.instances[0].public_dns_name }}"
      app_internal_ip: "{{ app_instance.instances[0].private_ip_address }}"
      become: true

- name: Configure app VM(s)
  environment:
    AWS_SECRET_KEY: "{{ lookup('env','AWS_SECRET_KEY') }}"
    AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    AWS_REGION: "{{ lookup('env','AWS_REGION') }}"
  hosts: tag_app
  remote_user: ubuntu
  gather_facts: false
  pre_tasks:
    - name: Gather info about app instance
      ec2_instance_info:
        filters:
          "tag:demo": 'true'
          "tag:Name": 'app'
          instance-state-name: 'running'
      register: app_instance
      delegate_to: localhost

    - name: Render app server page
      template:
        src: "{{ playbook_dir }}/../templates/index.html.j2"
        dest: /var/www/html/index.html
      become: true

- name: Finalize state
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Get info
      ec2_instance_info:
        filters:
          "tag:demo": 'true'
          "tag:Name": bastion
      register: bastion_instance

    - name: Get info
      ec2_instance_info:
        filters:
          "tag:demo": 'true'
          "tag:Name": app
      register: app_instance

    - name: Get info
      ec2_instance_info:
        filters:
          "tag:demo": 'true'
          "tag:Name": web
      register: web_instance


    - name: Set final security groups
      ec2:
        state: running
        instance_tags: { Name: bastion }
        group: bastion-sec

    - name: Set final security groups
      ec2:
        state: running
        instance_tags: { Name: app }
        group: app-sec

    - name: Set final security groups
      ec2:
        state: running
        instance_tags: { Name: web }
        group: web-sec

    - debug:
        msg:
          - "Deployment complete."
          - "SSH bastion host: ssh -A -i demo_key ubuntu@{{ bastion_instance.instances[0].public_dns_name }} "
          - "Web front-end (self-signed SSL redirect): http://{{ web_instance.instances[0].public_dns_name }} "
          - "Backend App (Via Bastion): {{ app_instance.instances[0].private_ip_address }}"
