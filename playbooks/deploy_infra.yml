---
- name: Create Initial Infra
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Set ssh key
      ec2_key:
        name: rsa_ssh_key
        key_material: "{{ ssh_key }}"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"

    - name: Create VPC for infra
      ec2_vpc_net:
        name: Infra_VPC
        cidr_block: 10.10.0.0/16
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
      register: infra_vpc

    - name: Create IGW for infra_vpc
      ec2_vpc_igw:
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        vpc_id: "{{ infra_vpc.vpc.id }}"
      register: igw

    - name: Determine main routing table id
      ec2_vpc_route_table_info:
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        filters:
          vpc-id: "{{ infra_vpc.vpc.id }}"
          "association.main": "true"
      register: main_route_table

    - name: Create Subnet for bastion
      ec2_vpc_subnet:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        cidr: 10.10.0.0/24
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        map_public: true
      register: bastion_subnet

    - name: Create Subnet for web
      ec2_vpc_subnet:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        cidr: 10.10.1.0/24
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        map_public: true
      register: web_subnet

    - name: Create Subnet for app
      ec2_vpc_subnet:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        cidr: 10.10.2.0/24
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
      register: app_subnet

    - name: Add default route for infra_vpc
      ec2_vpc_route_table:
        vpc_id: "{{ infra_vpc.vpc.id }}"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        route_table_id: "{{ main_route_table.route_tables[0].id }}"
        lookup: id
        subnets:
          - "{{ bastion_subnet.subnet.id }}"
          - "{{ web_subnet.subnet.id }}"
          - "{{ app_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"

    - name: Provision security groups for bastion
      ec2_group:
        name: bastion-sec
        description: "Security group for bastion"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        vpc_id: "{{ infra_vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports: 22
            cidr_ip:
              - 71.84.88.188/32 # Home
              - 128.107.0.0/16  # Cisco
      register: bastion_sec_group

    - name: Provision security group for web
      ec2_group:
        name: web-sec
        description: "Security group for web hosts"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        vpc_id: "{{ infra_vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports: 22
            group_id: "{{ bastion_sec_group.group_id }}"
      register: web_sec_group

    - name: Provision security group for app
      ec2_group:
        name: app-sec
        description: "Security group for app hosts"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        vpc_id: "{{ infra_vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports: 80
            group_id: "{{ web_sec_group.group_id }}"
          - proto: tcp
            ports: 22
            group_id: "{{ bastion_sec_group.group_id }}"

    - name: Provision VMs
      ec2:
        key_name: rsa_ssh_key
        instance_type: "{{ vm_type }}"
        image: "{{ vm_ami }}"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        instance_tags:
          Name: bastion
        assign_public_ip: yes
        vpc_subnet_id: "{{ bastion_subnet.subnet.id }}"
        group: bastion-sec
        wait: true
      register: ec2_instance

    - debug: var=ec2_instance

    - name: Add to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_hosts
      loop: "{{ ec2_instance.instances }}"

    - name: Provision Web VM
      ec2:
        key_name: rsa_ssh_key
        instance_type: "{{ vm_type }}"
        image: "{{ vm_ami }}"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        instance_tags:
          Name: web
        vpc_subnet_id: "{{ web_subnet.subnet.id }}"
        assign_public_ip: true
        wait: true
        group:
          - bastion-sec
      register: web_instance

    - name: Add to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_hosts
      loop: "{{ web_instance.instances }}"

    - name: Provision App VM
      ec2:
        key_name: rsa_ssh_key
        instance_type: "{{ vm_type }}"
        image: "{{ vm_ami }}"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        instance_tags:
          Name: app
        vpc_subnet_id: "{{ app_subnet.subnet.id }}"
        assign_public_ip: true
        wait: true
        group:
          - bastion-sec
      register: app_instance

    - name: Add to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_hosts
      loop: "{{ app_instance.instances }}"

    - name: Wait for SSH
      wait_for:
        port: 22
        host: "{{ item.public_dns_name }}"
        search_regex: OpenSSH
        delay: 30
        timeout: 320
      loop: "{{ app_instance.instances }}"

- name: Configure VMs
  environment:
    ANSIBLE_PRIVATE_KEY_FILE: ~/.ssh/id_rsa
  hosts: all
  remote_user: ubuntu
  become: true
  gather_facts: true

  tasks:
    - name: Install packages
      package:
        name: "{{ item }}"
      with_items:
        - nginx
        - curl

- name: Finalize state
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Set final security groups
      ec2:
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        state: running
        instance_id: "{{ app_instance.instance_ids }}"
        group: app-sec

    - name: Set final security groups
      ec2:
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        state: running
        instance_id: "{{ web_instance.instance_ids }}"
        group: web-sec
